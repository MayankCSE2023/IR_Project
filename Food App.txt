package com.example.foodapp

import android.os.Bundle
import android.provider.MediaStore
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp


class MainActivity : ComponentActivity() {

    private val pickImage =
        registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->
            uri?.let { uri ->
                val bitmap = MediaStore.Images.Media.getBitmap(this.contentResolver, uri)
                viewModel.onImageSelected(bitmap)
            }
        }

    private val viewModel by lazy { MainViewModel() }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContent {
            MaterialTheme {
                FoodDiscoveryApp(viewModel)
            }
        }
    }

    @Composable
    private fun FoodDiscoveryApp(viewModel: MainViewModel) {
        val context = LocalContext.current

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {

            Text(text = "Food Discovery",style = MaterialTheme.typography.headlineLarge)

            viewModel.bitmap?.let { bitmap ->
                Image(
                    bitmap = bitmap.asImageBitmap(),
                    contentDescription = null,
                    modifier = Modifier.size(300.dp)
                )
            }

            viewModel.isPredicting.let { isPredicting ->
                if (isPredicting) {
                    CircularProgressIndicator()
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            Button(onClick = { pickImage.launch("image/*") }) {
                Text("Select Image")
            }

            Button(onClick = { viewModel.predictImage(context) }) {
                Text("Predict")
            }

            Spacer(modifier = Modifier.height(16.dp))

            //Text(text = viewModel.resultText)
            Text(
                text = "Prediction: ${viewModel.resultText}\nConfidence: ${String.format("%.2f", viewModel.confidence)}%",
                style = MaterialTheme.typography.bodyLarge
            )
        }
    }
}

//--------------------------------------------------------------------------------------------------------------------------------------

package com.example.foodapp

import android.content.Context
import android.graphics.Bitmap
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import com.example.foodapp.ml.FruitModel
import org.tensorflow.lite.DataType
import org.tensorflow.lite.support.image.ImageProcessor
import org.tensorflow.lite.support.image.TensorImage
import org.tensorflow.lite.support.image.ops.ResizeOp
import org.tensorflow.lite.support.tensorbuffer.TensorBuffer

class MainViewModel : ViewModel() {
    var bitmap: Bitmap? by mutableStateOf(null)
    var resultText: String by mutableStateOf("")

    var isPredicting by mutableStateOf(false)
    var confidence by mutableStateOf(0f)

    fun onImageSelected(bitmap: Bitmap) {
        this.bitmap = bitmap
    }

    fun predictImage(context: Context) {
        bitmap?.let { bitmap ->
            isPredicting = true
            val labels = context.assets.open("labels.txt").bufferedReader().readLines()
            val model = FruitModel.newInstance(context)

            val tensorImage = TensorImage(DataType.FLOAT32)
            tensorImage.load(bitmap)

            val imageProcessor = ImageProcessor.Builder()
                .add(ResizeOp(224, 224, ResizeOp.ResizeMethod.BILINEAR))
                .build()

            val processedImage = imageProcessor.process(tensorImage)

            val inputFeature0 = TensorBuffer.createFixedSize(intArrayOf(1, 224, 224, 3), DataType.FLOAT32)
            inputFeature0.loadBuffer(processedImage.buffer)

            val outputs = model.process(inputFeature0)
            val outputFeature0 = outputs.outputFeature0AsTensorBuffer.floatArray

            var maxIdx = 0
            outputFeature0.forEachIndexed { index, fl ->
                if (outputFeature0[maxIdx] < fl)
                    maxIdx = index
            }

            resultText = labels[maxIdx]

            confidence = outputFeature0[maxIdx]

            isPredicting = false

            model.close()
        }
    }
}
